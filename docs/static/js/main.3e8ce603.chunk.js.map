{"version":3,"sources":["serviceWorker.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","App","React","letter","setLetter","speechSynthesis","getVoices","voicesList","setVoicesList","voice","sort","a","b","localService","lang","reduce","acc","cur","getVoice","onvoiceschanged","className","type","name","value","onChange","event","nextLetter","target","split","slice","join","spokenLetter","speech","SpeechSynthesisUtterance","cancel","speak","style","width","height","fontSize","textAlign","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCsCSC,EA1CsB,WACnC,MAA4BC,WAAe,IAA3C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCF,WAClCL,OAAOQ,gBAAgBC,aADzB,mBAAOC,EAAP,KAAmBC,EAAnB,KAGMC,EAAQP,WAAc,kBAjBb,SAACK,GAChB,OAAOA,EACJG,MAAK,SAACC,EAAGC,GAAJ,OACJD,EAAEE,eAAiBD,EAAEC,cAAmC,IAAnBF,EAAEE,aAAwB,GAAK,EAAK,KAE1EH,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEG,OAASF,EAAEE,KAAmB,UAAXH,EAAEG,KAAmB,GAAK,EAAK,KACpEC,QACC,SAACC,EAAKC,GAAN,MAA4B,UAAbA,EAAIH,KAAmBG,EAAMD,IAC5CT,EAAW,IASmBW,CAASX,KAAa,CAACA,IAEzDV,OAAOQ,gBAAgBc,gBAAkB,kBACvCX,GAAc,kBAAMX,OAAOQ,gBAAgBC,gBAgB7C,OACE,qBAAKc,UAAU,MAAf,SACE,uBACEC,KAAK,OACLC,KAAK,SACLC,MAAOpB,EACPqB,SApB2D,SAACC,GAEhE,IAAMC,EAAaD,EAAME,OAAOJ,MAAMK,MAAM,KAAKC,OAAO,GAAGC,KAAK,IAChE1B,EAAUsB,GAEV,SAAEK,GACA,IAAMC,EAAS,IAAIC,yBAAyBF,GAC5CC,EAAOvB,MAAQA,EAEfZ,OAAOQ,gBAAgB6B,SACvBrC,OAAOQ,gBAAgB8B,MAAMH,GAL/B,CAMGN,IAUCU,MAAO,CACLC,MAAO,QACPC,OAAQ,QACRC,SAAU,QACVC,UAAW,e,cC3CrBC,EAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SF6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB","file":"static/js/main.3e8ce603.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: $TSFixMe) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: $TSFixMe, config: $TSFixMe) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: $TSFixMe, config: $TSFixMe) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\n\nconst getVoice = (voicesList: SpeechSynthesisVoice[]): SpeechSynthesisVoice => {\n  return voicesList\n    .sort((a, b) =>\n      a.localService !== b.localService ? (a.localService !== true ? 1 : -1) : 0\n    )\n    .sort((a, b) => (a.lang !== b.lang ? (a.lang !== \"de-DE\" ? 1 : -1) : 0))\n    .reduce<SpeechSynthesisVoice>(\n      (acc, cur) => (cur.lang === \"de-DE\" ? cur : acc),\n      voicesList[0]\n    );\n};\n\nconst App: React.FunctionComponent = () => {\n  const [letter, setLetter] = React.useState(\"\");\n  const [voicesList, setVoicesList] = React.useState<SpeechSynthesisVoice[]>(\n    window.speechSynthesis.getVoices()\n  );\n  const voice = React.useMemo(() => getVoice(voicesList), [voicesList]);\n\n  window.speechSynthesis.onvoiceschanged = () =>\n    setVoicesList(() => window.speechSynthesis.getVoices());\n\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    // const nextLetter = event.target.value.slice(-1).toUpperCase();\n    const nextLetter = event.target.value.split(\" \").slice(-1).join(\"\");\n    setLetter(nextLetter);\n\n    ((spokenLetter) => {\n      const speech = new SpeechSynthesisUtterance(spokenLetter);\n      speech.voice = voice;\n\n      window.speechSynthesis.cancel();\n      window.speechSynthesis.speak(speech);\n    })(nextLetter);\n  };\n\n  return (\n    <div className=\"App\">\n      <input\n        type=\"text\"\n        name=\"letter\"\n        value={letter}\n        onChange={handleChange}\n        style={{\n          width: \"100vw\",\n          height: \"100vh\",\n          fontSize: \"100vh\",\n          textAlign: \"center\",\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}